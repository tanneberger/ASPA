<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std"
     docName="draft-ietf-sidrops-aspa-verification-16"
     submissionType="IETF"
     consensus="true"
     ipr="trust200902">

  <front>

    <title abbrev="ASPA-based AS_PATH Verification">
      BGP AS_PATH Verification Based on Autonomous System Provider Authorization (ASPA) Objects
    </title>
    <author fullname="Alexander Azimov" initials="A." surname="Azimov">
      <organization showOnFrontPage="true">Yandex</organization>
      <address>
        <postal>
          <street>Ulitsa Lva Tolstogo 16</street>
          <city>Moscow</city>
          <code>119021</code>
          <country>Russian Federation</country>
        </postal>
        <email>a.e.azimov@gmail.com</email>
      </address>
    </author>
    <author fullname="Eugene Bogomazov" initials="E." surname="Bogomazov">
      <organization showOnFrontPage="true">Qrator Labs</organization>
      <address>
        <postal>
          <street>1-y Magistralnyy tupik 5A</street>
          <city>Moscow</city>
          <code>123290</code>
          <country>Russian Federation</country>
        </postal>
        <email>eb@qrator.net</email>
      </address>
    </author>
    <author fullname="Randy Bush" initials="R." surname="Bush">
      <organization abbrev="IIJ &amp; Arrcus" showOnFrontPage="true">Internet Initiative Japan &amp; Arrcus, Inc.</organization>
      <address>
        <postal>
          <street>5147 Crystal Springs</street>
          <city>Bainbridge Island</city>
          <region>Washington</region>
          <code>98110</code>
          <country>United States of America</country>
        </postal>
        <email>randy@psg.com</email>
      </address>
    </author>
    <author fullname="Keyur Patel" initials="K." surname="Patel">
      <organization showOnFrontPage="true">Arrcus</organization>
      <address>
        <postal>
          <street>2077 Gateway Place</street>
          <street>Suite #400</street>
          <city>San Jose</city>
          <region>CA</region>
          <code>95119</code>
          <country>United States of America</country>
        </postal>
        <email>keyur@arrcus.com</email>
      </address>
    </author>
    <author fullname="Job Snijders" initials="J." surname="Snijders">
      <organization showOnFrontPage="true">Fastly</organization>
      <address>
        <postal>
          <street/>
          <code/>
          <city>Amsterdam</city>
          <country>Netherlands</country>
        </postal>
        <email>job@fastly.com</email>
      </address>
    </author>
    <author fullname="Kotikalapudi Sriram" initials="K." surname="Sriram">
      <organization abbrev="USA NIST" showOnFrontPage="true">USA National Institute of Standards and Technology</organization>
      <address>
        <postal>
          <street>100 Bureau Drive</street>
          <city>Gaithersburg</city>
          <region>MD</region>
          <code>20899</code>
          <country>United States of America</country>
        </postal>
        <email>ksriram@nist.gov</email>
      </address>
    </author>

    <date />

    <keyword>BGP</keyword>
    <keyword>Route leak</keyword>
    <keyword>Hijacks</keyword>

    <abstract>
      <t>
        This document describes procedures that make use of Autonomous System Provider Authorization (ASPA) objects in the 
		Resource Public Key Infrastructure (RPKI) to verify the Border Gateway Protocol (BGP) AS_PATH attribute of advertised routes.
        This type of AS_PATH verification provides detection and mitigation of route leaks and improbable AS paths.
        It also provides protection, to some degree, against prefix hijacks with forged-origin or forged-path-segment.
      </t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction" anchor="intro">
      <t>
        The Border Gateway Protocol (BGP) as originally designed is known to be vulnerable to prefix (or route) hijacks and BGP route leaks <xref target="RFC7908"/>.
        Some existing BGP extensions are able to partially solve these problems.
        For example, Resource Public Key Infrastructure (RPKI) based route origin validation (RPKI-ROV) <xref target="RFC6480"/> <xref target="RFC6482"/> <xref target="RFC6811"/> <xref target="RFC9319"/> can be used to detect and filter accidental mis-originations.
        <xref target="RFC9234"/> or <xref target="I-D.ietf-grow-route-leak-detection-mitigation"/> can be used to detect and mitigate accidental route leaks.
        While RPKI-ROV can prevent accidental prefix hijacks, malicious forged-origin prefix hijacks can still occur <xref target="RFC9319"/>.
        RFC9319 includes some recommendations for reducing the attack surface for forged-origin prefix hijacks.
      </t>
      <t>
        This document describes procedures that make use of Autonomous System Provider Authorization (ASPA) objects <xref target="I-D.ietf-sidrops-aspa-profile"/> in the RPKI to verify properties of the BGP AS_PATH attribute of advertised routes.
        ASPA-based AS_PATH verification provides detection and mitigation of route leaks and improbable AS paths.
        It also provides protection, to some degree, against prefix hijacks with forged-origin or forged-path-segment (<xref target="use-cases"/>).
        These new ASPA-based procedures automatically detect such anomalous AS_PATHs in announcements that are advertised between AS.
      </t>
      <t>
        ASPA objects are cryptographically signed registrations of customer-to-provider relationships and stored in a distributed database <xref target="I-D.ietf-sidrops-aspa-profile"/>.
        ASPA-based path verification is an incrementally deployable technique and provides benefits to also early adopters in the context of limited deployment.
      </t>
      <t>
        The verification procedures described in this document MUST be applied to BGP routes only with {AFI, SAFI} combinations {AFI 1 (IPv4), SAFI 1} and {AFI 2 (IPv6), SAFI 1} [IANA-AF].
        The procedures MUST NOT be applied to other address families by default.
      </t>

    <section title="Anomaly Propagation" anchor="propagation">
      <t>
        Both route leaks and hijacks have similar effects on ISP operations - they redirect traffic and can result in denial of service (DoS), eavesdropping, increased latency, and packet loss.
        The level of risk, however, depends significantly on the extent of propagation of the anomalies.
        For example, a route leak or hijack that is propagated only to customers may cause bottlenecking within a particular ISP's customer cone, but if the anomaly propagates through lateral (i.e., non-transit) peers and transit providers, or reaches global distribution through transit-free networks, then the ill effects will likely be amplified and experienced across continents.
      </t>
    </section>
    <section title="Requirements Language" anchor="req">
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/>
    when, and only when, they appear in all capitals, as shown here.
        </t>
    </section>
  </section>

    <section title="Terminology" anchor="terminology">
       <t>
         The following terms are used with special meaning.
       </t>
       <t>
         <list style="hanging">
              <t hangText="Provider:">
                 The term "provider" is synonymously with "transit provider", see <xref target="I-D.ietf-sidrops-aspa-profile" sectionFormat="comma" section="1"/>.
              </t>

              <t hangText="Customer:">
                 An autonomous system uses a provider for transit, see <xref target="I-D.ietf-sidrops-aspa-profile" sectionFormat="comma" section="1"/>.
              </t>

              <t hangText="CAS:">
                A Customer AS, see <xref target="I-D.ietf-sidrops-aspa-profile" sectionFormat="comma" section="1"/>.
              </t>

              <t hangText="PAS:">
                A Provider AS, see  <xref target="I-D.ietf-sidrops-aspa-profile" sectionFormat="comma" section="1"/>.
              </t>

              <t hangText="Route is ineligible:">
                 The term has the same meaning as in <xref target="RFC4271"/>, i.e., "route is ineligible to be installed in Loc-RIB and will be excluded from the next phase of route selection."
              </t>

              <t hangText="SPAS:">
                A Set of Provider ASes, see <xref target="I-D.ietf-sidrops-aspa-profile" sectionFormat="comma" section="3"/>.
              </t>

              <t hangText="VAP:">
                A Validated ASPA Payload, see <xref target="ASPA"/>.
              </t>

              <t hangText="VAP-SPAS:">
                A Validated ASPA Payload of a set of provider ASes, see <xref target="ASPA"/>.
              </t>
         </list>
       </t>
    </section>

    <section title="Peering Relationships" anchor="peering">
      <t>
       For path verification purposes in this document, the BGP roles an AS can have in relation to a neighbor AS are customer, provider, lateral peer, Route Server (RS), RS-client, and complex.
       These relationships are defined in <xref target="RFC9234"/>.
       A special case of complex relation is mutual-transit when ASes MAY export everything (both customer and non-customer routes) to each other, i.e., customer-to-provider relationship applies in each direction.
        All roles are defined locally.
     </t>
  </section>

    <section title="Autonomous System Provider Authorization Record" anchor="ASPA">
      <t>
        An ASPA record is a digitally signed object that binds a set of Provider AS numbers to a Customer AS (CAS) number (in terms of BGP announcements) and is signed by the CAS <xref target="I-D.ietf-sidrops-aspa-profile"/>.
        The ASPA attests that the CAS indicated a Set of Provider ASes (SPAS), which applies only to the IPv4 and IPv6 address families (i.e., AFI = 1 and AFI = 2) and only to Network Layer Reachability Information used for unicast forwarding (SAFI = 1).
        The definition of Provider AS is given in Section 1 of the ASPA profile object document <xref target="I-D.ietf-sidrops-aspa-profile"/>.
      </t>
      <t>
        The notation (AS x, {AS y1, AS y2, ...}), is used to represent an ASPA object for a CAS denoted as AS x.
        In this notation, the set {AS y1, AS y2, ...} represents the Set of Provider ASes (SPAS) of the CAS (AS x).
        A CAS is expected to register a single ASPA listing all its Provider ASes (see <xref target="rec1"/>), if 
        a CAS has multiple ASPAs then the union of all Provider ASes is taken.
      </t>
      <t>
        Validated ASPA Payload (VAP) refers to the payload in a cryptographically verified (i.e., X.509 valid <xref target="RFC3779"/> <xref target="RFC5280"/>) ASPA object.
        In the procedures for the AS path verification described in this document (<xref target="pair-validation"/>, <xref target="verif"/>), VAP-SPAS refers to the set of provider ASes derived from the VAP(s) of the CAS in consideration.
      </t>
    </section>

    <section title="ASPA Registration Recommendations" anchor="rec1">
      <t>
        An ASPA object that only shows AS 0 as provider AS is called AS0 ASPA. It MUST
        be registered if the CAS is a non-transparent Route Server AS (RS AS) without a transit provider.
      </t>
      <t>
        ASPA objects are not AFI sensitive, hence all providers independent of AFI MUST be listed. Every AS SHOULD at most
        have one ASPA object. The software that provides hosting for ASPA records SHOULD support enforcement of this practice.
        During a transition process between different certificate authority (CA) registries, the ASPA records SHOULD be kept identical in all relevant registries.
      </t>
      <t>
        As mentioned in <xref target="ASPA"/>, the set of provider ASes contained in the VAP(s) is referred to as the VAP-SPAS of the AS registering the ASPA(s).
        Normally, a VAP-SPAS is not expected to contain both an AS 0 and other Provider ASes,
        but an unexpected presence of AS 0 has no influence on the AS path verification procedures (see <xref target="pair-validation"/>, <xref target="verif"/>).
      </t>
      <t>
        Each of the two ASes in a mutual-transit pair MUST register its ASPA including the other AS in its SPAS.
      </t>
      <t>
        The ASes on the boundary of an AS Confederation MUST register ASPAs using the Confederation's global ASN as the CAS.
      </t>
    </section>
    <section title="Provider Authorization Function" anchor="pair-validation">
      <t>
        Let AS x and AS y represent two unique ASes.
        A provider authorization function, authorized(AS x, AS y), checks if the ordered pair of ASNs, (AS x, AS y), has the property that AS y is an attested provider of AS x per VAP-SPAS of AS x.
        The VAP-SPAS table is assumed to be organized in such a way that it can be queried to check (1) if a specified CAS = AS x has an entry (i.e., SPAS listed), or (2) if for a given (AS x, AS y) tuple, AS x is listed in the VAP-SPAS as a provider associated with CAS = AS y.
        By term "Provider+" the function should signal if AS y plays role of Provider, non-transparent RS, or mutual-transit neighbor.
        This function is specified as follows:
      </t>
      <t>
        <figure anchor="fig1" align="left" suppress-title="true" pn="figure-1">
          <name slugifiedName="HFC-illustration">provider authorization function.</name>
          <artwork align="left" name="" type="" alt="">
<![CDATA[

                     /
                     | "No Attestation" if there is no entry
                     |   in VAP-SPAS table for CAS = AS x
                     |
authorized(AS x, AS y) =  / Else, "Provider+" if the VAP-SPAS entry
                     \   for CAS = AS x includes AS y
                     |
                     | Else, "Not Provider+"
                     \
]]>
</artwork>
        </figure>
       </t>
      <t>
        The "No Attestation" result is returned only when the CAS = AS x has no entry in the VAP-SPAS table, which occurs when no ASPA is retrieved for the CAS or none of its ASPAs are cryptographically valid.
        The provider authorization function is used in the ASPA-based AS_PATH verification algorithms described in <xref target="Upflow"/> and <xref target="Downflow"/>.
      </t>

    </section>

    <section title="AS_PATH Verification" anchor="verif">
      <t>
        The procedures described in this document are applicable only to four-octet AS number compatible BGP speakers <xref target="RFC6793"/>.
        If such a BGP speaker receives both AS_PATH and AS4_PATH attributes in an UPDATE, then the procedures are applied on the reconstructed AS path (Section 4.2.3 of <xref target="RFC6793"/>).
        So, the term AS_PATH is used in this document to refer to the usual AS_PATH <xref target="RFC4271"/> as well as the reconstructed AS path.
      </t>
      <t>
        If an attacker creates a route leak intentionally, they may try to strip their AS from the AS_PATH.
        To partly guard against that, a check is necessary to match the most recently added AS in the AS_PATH to the BGP neighbor's ASN.
        This check MUST be performed as specified in Section 6.3 of <xref target="RFC4271"/>.
        If the check fails, then the AS_PATH is considered a Malformed AS_PATH and the UPDATE is considered to be in error (Section 6.3 of <xref target="RFC4271"/>).
        The case of transparent RS MUST also be appropriately taken care of (e.g., by suspending the neighbor ASN check).
        The check fails also when the AS_PATH is empty (zero length) and such UPDATEs will also be considered to be in error.
      </t>
      <t>
        <xref target="I-D.ietf-idr-deprecate-as-set-confed-set"/> specifies that "treat-as-withdraw" error handling <xref target="RFC7606"/> SHOULD be applied to routes with AS_SET in the AS_PATH.
        In the current document, routes with AS_SET are given Invalid evaluation in the AS_PATH verification procedures (<xref target="Upflow"/> and <xref target="Downflow"/>).
        See <xref target="mitigation"/> for how routes with Invalid AS_PATH are handled.
      </t>
      <t>
        In <xref target="Upflow"/> and <xref target="Downflow"/> below, the terms "upstream path" and "downstream path" generally refer to AS paths received in the upstream direction (from a customer, lateral peer, RS-client, RS) and in the downstream direction (provider), respectively.
      </t>

	<section title="Principles" anchor="principles">
      <t>
        Let the sequence {AS(N), AS(N-1),..., AS(2), AS(1)} represent the AS_PATH in terms of unique ASNs, where AS(1) is the origin AS and AS(N) is the most recently added AS and neighbor of the receiving/validating AS.
        Such sequence can be described with the following diagram.
      </t>
      <t>
        <figure anchor="fig2" align="left" suppress-title="false" pn="figure-2">
          <name slugifiedName="ramp-illustration">Illustration of up-ramp and down-ramp. </name>
          <artwork align="left" name="" type="" alt="">
<![CDATA[

                    AS(L) ............. AS(K)
                     /                     \
                 AS(L+1)                  AS(K-1)
                    .                       .
                   .                         .
    (down-ramp)   .                           .  (up-ramp)
                 .                             .
                .                               .
              AS(N-1)                          AS(2)
                /                                \
             AS(N)                               AS(1)
              /                                (Origin AS)
    Receiving & Validating AS

        Each ramp has consecutive customer-to-provider hops in the bottom-to-top direction
]]>
          </artwork>
        </figure>
      </t>

      <t>
        The K defines the length of the up-ramp.
        The N - L + 1 defines the length of down-ramp.
        A valid path may have a one horizontal hop that represents peering relation.
      </t>
      <t>
        <strong>Determining the Validity from Indices</strong>
      </t>
      <t>
        With ASPA we can't measure exact length of the ramps, because of potentially missing ASPA objects, but we can measure it's minimum and maximum boundaries.
      </t>
        <figure anchor="fig3" align="left" suppress-title="false" pn="figure-3">
          <name slugifiedName="index-illustration">Illustration of the various indices assigned to an AS_PATH</name>
          <artwork align="left" name="" type="" alt="">
            <![CDATA[
                                AS_PATH



 N                                                                     0
 |                                                                     |
 |---------|---------|-----------------------------|---------|---------|
 |    min_down_ramp                                     min_up_ramp    |
                max_down_ramp                 max_up_ramp             

]]>
          </artwork>
        </figure>

      <t>
        The min_up_ramp and min_down_ramp indicate the first occurrence of a missing ASPA object. In contrast to max_up_ramp and max_down_ramp, which indicate that the next AS is not in the SPAS, therefore the edge is 'Not Provider+'.
      </t >
      <t>
        The maximum up-ramp length can be defined as I, where I is the minimum index for which authorized(A(I), A(I+1)) returns 'Not Provider+'. If there is no such I, the maximum is equal to AS_PATH length, or N. We define this parameter as max_up_ramp. The minimum up-ramp length can be defined as I, where I is minimum index for which authorized(A(I), A(I+1)) returns "No Attestation" or "Not Provider+". If there is no such I, the AS_PATH consists only of "Provider+" pairs only, so the minimum up-ramp length equals to AS_PATH length, or N. We define this parameter as min_up_ramp.
      </t>
      <t>
        Similar the maximum down-ramp length can be defined as N - J + 1 where J is maximum index for which authorized(A(J), A(J-1)) returns "Not Provider+". If there is no such J, the maximum is equal to AS_PATH length, or N. We define this parameter as max_down_ramp. The minimum down-ramp length can be defined as N - J + 1 where J is maximum index for which authorized(A(J), A(J-1)) returns "No Attestation" or "Not Provider+". If there is no such J, the minimum equals to AS_PATH length, or N. We define this parameter as min_down_ramp.
      </t>

      <t>
        If sum of maximum estimations of up-ramp and down-ramp is less than N, the path is Invalid.
        If sum of minimum estimations of up-ramp and down-ramp is less than N, the path is Unknown. Otherwise, it is Valid.
      </t>

      <t>
        Below are formal procedures for path verification depending on the role between receiving AS and its neighbour.
        These procedures are using compressed sequence representation of AS_PATH {AS(N), AS(N-1),..., AS(2), AS(1)} and defined with above parameters max_up_ramp, min_up_ramp, max_down_ramp and min_up_ramp
      </t>
    </section>

    <section title="Algorithm for Upstream Paths" anchor="Upflow">
      <t>
        The upstream verification algorithm described here is applied when a route is received from a customer or lateral peer, or is received by an RS from an RS-client, or is received by an RS-client from an RS.
        In all these cases, the receiving/validating eBGP router expects the AS_PATH does not have a down-ramp, only up-ramp.
        Thus max_down_ramp and min_down_ramp are set to 0.
      </t>
      <t>
        The upstream path verification procedure is specified as follows:
      </t>
      <t>
        <list style="numbers">
          <t>
            If the AS_PATH has an AS_SET, then the procedure halts with the outcome "Invalid".
          </t>
          <t>
            If N = 1, then the procedure halts with the outcome "Valid".
            Else, continue.
          </t>
          <t>
            At this step, N &ge; 2. If max_up_ramp is less than N the procedure halts with the outcome 'Invalid'.
            Else, continue.
          </t>
          <t>
            If min_up_ramp is less than N the procedure halts with the outcome 'Unknown'.
            Else, the procedure halts with the outcome "Valid".
          </t>
        </list>
      </t>
    </section>

    <section title="Algorithm for Downstream Paths" anchor="Downflow">
      <t>
        The downstream verification algorithm described here is applied when a route is received from a transit provider.
      </t>
      <t>
        <list style="numbers">
          <t>
            If the AS_PATH has an AS_SET, then the procedure halts with the outcome "Invalid".
          </t>
          <t>
            If 1 &le; N &le; 2, then the procedure halts with the outcome "Valid".
            Else, continue.
          </t>
          <t>
            At this step, N &ge; 3.
            If the sum of max_up_ramp and max_down_ramp is less than N the procedure halts with the outcome 'Invalid'.
          </t>
          <t>
            If the sum of min_up_ramp and min_down_ramp is less than N, the procedure terminates with the result 'Unknown', otherwise 'Valid'.
          </t>
        </list>
      </t>
    </section>
  </section>

  <section anchor="mitigation" title="Configuration of a Mitigation Policy">
      <t>
        The specific configuration of mitigation policies based on AS_PATH verification using ASPA is at the discretion of the network operator.
        The following policies are highly recommended, though.
      </t>
      <t>
	    <strong>Invalid</strong>:
        If the AS_PATH is determined to be Invalid, then the route SHOULD be considered ineligible for route selection (see Section 1.2).
        The route SHOULD not be considered further but MUST be kept in the Adj-RIB-In for potential future re-evaluation (see [RFC9324]).
      </t>
      <t>
	    <strong>Valid and Unknown</strong>:
        Any Valid or Unknown AS_PATH SHOULD not be distinguished in the route selection process because of the ASPA validation outcome, but prefered over an Invalid AS_PATH.
      </t>
    </section>

  <section title="Deployment Recommendations">
    <t>This section describes practical deployment recommendations related to implementation and operation of ASPA.</t>

    <section anchor="ingress" title="Running ASPA on Inter-AS Border Routers">
      <t>
        Procedures for ASPA-based AS_PATH verification and mitigation described in this document are NOT RECOMMENDED for use within an AS, including eBGP links internal to a BGP Confederation.
      </t>
    </section>

    <section title="Implementation of Verification Algorithm">
      <t>
	    Implementations of this specification are not required to implement the AS_PATH verification procedures exactly as described in Section <xref target="Upflow"/> and <xref target="Downflow"/>, but MUST provide functionality equivalent to the external behavior resulting from those procedures.
      Therefore, implementation may differ, for example, for computational efficiency purposes. For a list of different implementation see <xref target="NETD-TUD-REFERENCE-IMPLEMENTATION"/>.
      </t>
    </section>

    <section title="BGP Roles">
      <t>
        The procedures for local BGP Role announcement in the BGP OPEN message and neighbor role cross-check specified in <xref target="RFC9234"/> are RECOMMENDED.
        The configured BGP Roles SHOULD be used to automate the use of described above verification procedures helping to distinguish whether upstream or downstream procedures should be applied.
      </t>

      <t>
        In case of Complex peering relations that can't be segregated in multiple eBGP sessions, an operator may want to achieve an equivalent outcome by configuring policies with corresponding verification procedures on a per-prefix basis.
      </t>
    </section>

    <section title="Logging" anchor="logging">
      <t>
	    For any route with an Invalid AS_PATH, the cause of the Invalid state SHOULD be logged for monitoring and diagnostic purposes.
	    The cause of the Invalid state can be in the form of listing the AS hops which were evaluated by the provider authorization function to be &quot;Not Provider+&quot;.
	    The logging router, however, cannot necessarily determine the origin of the route leak.
      </t>
    </section>
  </section>

  <section title="Operational Considerations">
    <section title="4-Byte AS Number Requirement">
      <t>
        The procedures specified in this document are compatible only with BGP implementations that support 4-byte ASNs in the AS_PATH.
        This limitation should not have a real effect on operations since legacy BGP routers are rare, and it is highly unlikely that they support integration with the RPKI.
      </t>
    </section>

    <section title="Correctness of the ASPA">
      <t>
        ASPA issuers should be aware of the implications of ASPA-based AS path verification.
        Network operators must keep their ASPA objects correct and up to date.
        Otherwise, for example, if a provider AS is left out of the Set of Provider ASes (SPAS) in the ASPA, then routes containing the CAS (in the ASPA) and said provider AS may be incorrectly labeled as Invalid and considered ineligible for route selection (see <xref target="ingress"/>).
      </t>
    </section>

    <section title="Make Before Break">
      <t>
        ASPA issuers SHOULD apply the make-before-break principle while updating an ASPA registration.
		For example, when adding new Provider ASes in the SPAS, if the new ASPA is meant to replace a previously created ASPA, the latter SHOULD be decommissioned only after allowing sufficient time for the new ASPA to propagate to Relying Parties (RP) through the global RPKI system.
      </t>
    </section>

    <section title="DoS/DDoS Mitigation Service Provider">
      <t>
        An AS may have a mitigation service provider (MSP) for protection from Denial of Service (DoS)/Distributed DoS (DDoS) attacks targeting servers with IP addresses in the prefixes the AS originates.
        Such an AS MAY include the MSP's AS in the SPAS of its ASPA.
        With such an ASPA in place, in the event of an attack, the AS (customer of the MSP) can announce more specific prefixes (over a BGP session) to the MSP's AS for mitigation purposes, and such announcements would be able to pass the ASPA-based path verification.
        It is assumed that appropriate ROAs are registered in advance so that the announcements can pass RPKI-ROV as well.
      </t>
    </section>
  </section>

  <section title="Comparison to Other Technologies">
    <section title="Only to Customer (OTC) Attribute" anchor="otc">
      <t>
        While the ASPA-based AS_PATH verification method (<xref target="ingress"/>) detects and mitigates route leaks that were created by preceding ASes listed in the AS_PATH, it lacks the ability to prevent route leaks from occuring at the local AS.
        ASPA objects also lacks opportunity to describe policies when two AS have different roles at different links.
	    The use of the Only to Customer (OTC) Attribute <xref target="RFC9234"/> fills in that gap.
	    The procedures utilizing the OTC Attribute set out in <xref target="RFC9234"/> complement those described in this document.
        Implementation of those procedures in addition to ASPA-based AS_PATH verification is RECOMMENDED.
      </t>
    </section>

    <section title="BGPsec">
      <t>
        BGPsec <xref target="RFC8205"/> was designed to solve the problem of AS_PATH verification by including cryptographic signatures in BGP Update messages.
        It offers protection against unauthorized path modifications and assures that the BGPsec Update actually traveled the path shown in the BGPsec_PATH Attribute.
        However, it does not detect route leaks (valley-free violations).
        In comparison, the ASPA-based path verification described in this document detects if the AS path is improbable and focuses on detecting route leaks (including malicious cases) and forged-origin hijacks.
      </t>
      <t>
        BGPsec and ASPA are complementary technologies.
      </t>
    </section>

    <section title="Peerlock">
      <t>
        The Peerlock mechanism <xref target="Peerlock"/> <xref target="Flexsealing"/> has a similar objective as the ASPA-based route leak protection mechanism described in this document.
        It is commonly deployed by large Internet carriers to protect each other from route leaks.
        Peerlock depends on a laborious manual process in which operators coordinate the distribution of unstructured Provider Authorizations through out-of-band means in a many-to-many fashion.
        On the other hand, ASPA's use of the RPKI allows for automated, scalable, and ubiquitous deployment, making the protection mechanism available to a wider range of network operators.
      </t>
      <t>
        The ASPA mechanism implemented in router code (in contrast to Peerlock's AS_PATH regular expressions) also provides a way to detect anomalies propagated from transit providers and IX route servers.
        ASPA is intended to be a complete solution and replacement for existing Peerlock deployments.
      </t>
    </section>
  </section>

  <section anchor="IANA" title="IANA Considerations">
    <t>
      This document includes no request to IANA.
    </t>
  </section>

  <section anchor="security" title="Security Considerations">
    <t>
      While the ASPA-based mechanism is able to detect and mitigate the majority of mistakes and malicious activity affecting routes, it might fail to detect some malicious path modifications, especially for routes that are received from transit providers.
    </t>
    <t>
      Since an upstream provider becomes a trusted point, in theory, it might be able to propagate some instances of hijacked prefixes with forged-origin or forged-path-segment or even routes with manipulated AS_PATHs, and such attacks might go undetected by its customers.
    </t>
    <t>
      While such attacks like may happen, it does not seem to be a realistic scenario.
      Normally a customer and their transit provider would have a signed agreement, and a policy violation (of the above kind) should have legal consequences or the customer can just drop the relationship with such a provider and remove the corresponding ASPA record.
    </t>
  </section>

  <section removeInRFC="true">
    <name>Implementation Status</name>
      <t>
        This section records the status of known implementations of the protocol defined by this specification at the time of posting of this Internet-Draft.
        The inclusion of this section here follows the process described in <xref target="RFC7942"/>.
        The description of implementations in this section is intended to assist the IETF in its decision processes in progressing drafts to RFCs.
        Please note that the listing of any individual implementation here does not imply endorsement by the IETF.
        Furthermore, no effort has been spent to verify the information presented here that was supplied by IETF contributors.
        This is not intended as, and must not be construed to be, a catalog of available implementations or their features.
        Readers are advised to note that other implementations may exist.
      </t>
      <t>
        According to <xref target="RFC7942"/>, "this will allow reviewers and working groups to assign due consideration to documents that have the benefit of running code, which may serve as evidence of valuable experimentation and feedback that have made the implemented protocols more mature.
        It is up to the individual working groups to use this information as they see fit".
      </t>
      <t>
      <ul>
        <li>
          A BGP implementation <xref target="bgpd">OpenBGPD</xref> (version 7.8 and higher), written in C, was provided by Claudio Jeker, Theo Buehler, and Job Snijders.
        </li>
        <li>
          The implementation NIST-BGP-SRx <xref target="BGP-SRx"/> is a software suite that provides a validation engine (BGP-SRx) and a Quagga-based BGP router (Quagga-SRx).
          It includes unit test cases for testing the ASPA-based path verification.
          It was provided by Oliver Borchert, Kyehwan Lee, and their colleagues at US NIST.
          It requires some additional work to incorporate the latest changes in the draft specifications related to IXP RS AS and RS-client.
        </li>
        <li>
          ASPA Support in <xref target="RTRLIB-IMPLEMENTATION">RTRlib</xref> was written in C, by Moritz Schulz, Carl Seifert and Tassilo Tanneberger.
        </li>
      </ul>
      </t>
    </section>
  </middle>
  <back>

    <references title="Normative References">
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.RFC.6480.xml"?>
      <?rfc include="reference.RFC.6482.xml"?>
      <?rfc include="reference.RFC.6811.xml"?>
      <?rfc include="reference.RFC.4271.xml"?>
      <?rfc include="reference.RFC.6793.xml"?>
      <?rfc include="reference.RFC.7606.xml"?>
      <?rfc include="reference.RFC.7908.xml"?>
      <?rfc include="reference.RFC.8174.xml"?>
	  <?rfc include="reference.RFC.8481.xml"?>
	  <?rfc include="reference.RFC.8893.xml"?>
      <?rfc include="reference.RFC.9234.xml"?>
	  <?rfc include="reference.RFC.9324.xml"?>
      <?rfc include="reference.I-D.ietf-sidrops-aspa-profile.xml"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.3779.xml"?>
      <?rfc include="reference.RFC.5280.xml"?>
      <?rfc include="reference.RFC.8205.xml"?>
	 <!-- <?rfc include="reference.RFC.7938.xml"?> -->
      <?rfc include="reference.RFC.7942.xml"?>
      <?rfc include="reference.RFC.9319.xml"?>
      <?rfc include="reference.I-D.ietf-grow-route-leak-detection-mitigation.xml"?>
      <?rfc include="reference.I-D.ietf-idr-deprecate-as-set-confed-set.xml"?>

      <reference anchor="Peerlock" target="https://www.nanog.org/sites/default/files/Snijders_Everyday_Practical_Bgp.pdf">
        <front>
          <title>Peerlock</title>
          <author fullname="Job Snijders" initials="J." surname="Snijders">
            <organization abbrev="NTT">NTT Communications</organization>
          </author>
          <date month="June" year="2016"/>
        </front>
      </reference>

      <reference anchor="Flexsealing" target="https://arxiv.org/pdf/2006.06576.pdf">
        <front>
          <title>Flexsealing BGP Against Route Leaks: Peerlock Active Measurement and Analysis</title>
          <author fullname="Tyler McDaniel" initials="T." surname="McDaniel">
            <organization>University of Tennesse</organization>
          </author>
          <author fullname="Jared M. Smith" initials="J." surname="Smith">
            <organization>University of Tennesse</organization>
          </author>
          <author fullname="Max Schuchard" initials="M." surname="Schuchard">
            <organization>University of Tennesse</organization>
          </author>
          <date month="November" year="2020"/>
        </front>
      </reference>

      <reference anchor="sriram1" target="https://datatracker.ietf.org/meeting/110/materials/slides-110-sidrops-sriram-aspa-alg-accuracy-01">
        <front>
          <title>On the Accuracy of Algorithms for ASPA Based Route Leak Detection</title>
          <author initials="K." surname="Sriram"><organization /></author>
          <author initials="J." surname="Heitz"><organization /></author>
          <date month="March" year="2021"/>
        </front>
        <seriesInfo name="IETF SIDROPS Meeting," value="Proceedings of the IETF 110" />
      </reference>

      <reference anchor="IANA-AF" target="https://www.iana.org/assignments/address-family-numbers/address-family-numbers.xhtml" quote-title="true">
        <front>
          <title>Address Family Numbers</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date/>
        </front>
        <!-- <seriesInfo name="Reachable from" value="http://www.iana.org/numbers.html"/> -->
      </reference>

      <reference anchor="IANA-SAF" target="https://www.iana.org/assignments/safi-namespace/safi-namespace.xhtml" quote-title="true">
        <front>
          <title>Subsequent Address Family Identifiers (SAFI) Parameters</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date/>
        </front>
      <!-- <seriesInfo name="Reachable from" value="http://www.iana.org/numbers.html"/> -->
      </reference>

      <reference anchor="bgpd" target="http://www.openbgpd.org/">
        <front>
          <title>OpenBGPD</title>
          <author initials="C." surname="Jeker">
            <organization>OpenBSD</organization>
          </author>
          <date/>
        </front>
      </reference>

      <reference anchor="BGP-SRx" target="https://www.nist.gov/services-resources/software/bgp-secure-routing-extension-bgp-srx-software-suite">
        <front>
          <title>BGP Secure Routing Extension (BGP-SRx) Software Suite</title>
          <author>
            <organization>NIST</organization>
          </author>
        </front>
        <seriesInfo name="NIST Open-Source Software" value=""  />
      </reference>

      <reference anchor="NETD-TUD-REFERENCE-IMPLEMENTATION" target="https://github.com/netd-tud/IETF-ASPA/">
        <front>
          <title>ASPA AS_PATH Validation Reference Implementation</title>
          <author fullname="Tassilo Tanneberger" initials="T." surname="Tanneberger">
            <organization>TUD Dresden University of Technology</organization>
          </author>
          <author fullname="Moritz Schulz" initials="M." surname="Schulz">
            <organization>TUD Dresden University of Technology</organization>
          </author>
          <author fullname="Carl Seifert" initials="C." surname="Seifert">
            <organization>TUD Dresden University of Technology</organization>
          </author>
        </front>
      </reference>

      <reference anchor="RTRLIB-IMPLEMENTATION" target="https://github.com/rtrlib/rtrlib">
        <front>
          <title>ASPA Support in RTRlib</title>
          <author fullname="Tassilo Tanneberger" initials="T." surname="Tanneberger">
            <organization>TUD Dresden University of Technology</organization>
          </author>
          <author fullname="Moritz Schulz" initials="M." surname="Schulz">
            <organization>TUD Dresden University of Technology</organization>
          </author>
          <author fullname="Carl Seifert" initials="C." surname="Seifert">
            <organization>TUD Dresden University of Technology</organization>
          </author>
        </front>
      </reference>
    </references>
	
    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>
        The authors wish to thank Jakob Heitz, Amir Herzberg, Igor Lubashev, Ben Maddison, Russ Housley, Jeff Haas, Nan Geng, Nick Hilliard, Shunwan Zhuang, Yangyang Wang, Martin Hoffmann, Jay Borkenhagen, Amreesh Phokeer, Aftab Siddiqui, Dai Zhibin, Doug Montgomery, Rich Compton, Andrei Robachevsky, Iljitsch van Beijnum, Matthias Waehlisch, Tassilo Tanneberger, Moritz Schulz, and Carl Seifert for comments, suggestions, and discussion on the path verification procedures or the text in the document.
        For the implementation and testing of the procedures in the document, the authors wish to thank Claudio Jeker and Theo Buehler <xref target="bgpd"/> as well as Kyehwan Lee and Oliver Borchert <xref target="BGP-SRx"/>.
      </t>
    </section>

    <section title="ASPA Use Cases" anchor="use-cases">
      <t>
        The ASPA-based path verification procedures are able to check routes received between AS.
        These procedures combined with BGP Roles and the OTC Attribute <xref target="RFC9234" /> and RPKI-ROV <xref target="RFC6811"/> <xref target="RFC9319"/> can provide a fully automated solution to detect and filter many of the ordinary prefix hijacks, route leaks, and prefix hijacks with forged-origin or forged-path-segment (see Property 3 below).
      </t>
      <t>
        The ASPA-based path verification at ingress eBGP routers (<xref target="verif" />, <xref target="ingress" />) has the following properties (detection capabilities):
      </t>
      <t>
        <list style="">
          <t>
            Property 1: Let AS A and AS B be any two ASes in the Internet doing ASPA (registration and path verification) and no assumption is made about the ASPA deployment status of other ASes.
            Consider a route propagated from AS A to a customer or lateral peer.
            The route is subsequently leaked by an offending AS in the AS path before being received at AS B on a customer or lateral peer interface.
            The ASPA-based path verification at AS B always detects such a route leak though it may not be able to identify the AS that originated the leak.
            This assertion is true even when the sender AS A (or receiver AS B) is an RS AS and the neighbor AS that AS A sent to (or AS B received from) is an RS-client.
          </t>
          <t>
            Property 2: Again, let AS A and AS B be any two ASes in the Internet doing ASPA (registration and path verification) and no assumption is made about the ASPA deployment status of other ASes.
            Consider a route received at AS B on a customer or lateral peer interface that is a forged-origin prefix hijack involving AS A as the forged-origin.
            The ASPA-based path verification at AS B always detects such a forged-origin prefix hijack.
          </t>
          <t>
           Property 3: This is an extension of Property 2 above to the case of prefix hijacking with a forged-path-segment.
           Such hijacking refers to the forging of multiple contiguous ASes in an AS path beginning with the origin AS.
           Again, let AS A and AS B be any two ASes in the Internet doing ASPA (registration and path verification).
           Let AS A's providers, AS P and AS Q, also be registering ASPA.
           No assumption is made about the ASPA deployment status of any other ASes in the Internet.
           Consider a route received at AS B on a customer or lateral peer interface that is a prefix hijack with a forged-path-segment {AS P, AS A} or {AS Q, AS A}.
           That is, the hijacker attaches this path-segment at the beginning of their route announcement.
           The ASPA-based path verification at AS B always detects such a forged-path-segment prefix hijack.
           For a chance to be successful (remain undetected by AS B), the hijacker may resort to a forged-path-segment with three ASes including a provider AS of AS P (or AS Q).
           But even that can be foiled (detected) if the providers of AS P and AS Q also register ASPA.
           Having to use a longer forged-path-segment to avoid detection by AS B diminishes the ability of the hijacked route to compete with the corresponding legitimate route in route selection.
          </t>
          <t>
            Property 4: Let AS A, AS B, and AS C be any three ASes in the Internet doing ASPA (registration and path verification).
            Consider a route propagated from AS A in any direction (i.e., to a neighbor AS with any of the BGP roles described in <xref target="peering"/>).
            Let the route be received at AS B from any direction and detected to be a route leak (facilitated due to a sufficient set of ASes doing ASPA in the AS path from AS A to AS B).
            Assume that AS B's local policy is such that it only lowers the route's LOCAL_PREF <xref target="RFC4271"/>.
            Let such a route, selected and forwarded by AS B, be subsequently received at AS C.
            No assumption is made about the ASPA compliance of the ASes in the intervening path from AS B to AS C.
            The ASPA-based path verification at AS C always detects such received route as a leak regardless of the direction (type of peer) it was received from.
          </t>
        </list>
      </t>
      <t>
        In the description of the properties listed above, the term "customer" can be replaced with "RS-client".
      </t>
      <t>
        An observation that follows from Property #1 above is that if any two ISP ASes register ASPAs and implement the detection
        and mitigation procedures, then any route received from one of them and leaked to the other by a common customer AS
        (ASPA compliant or not) will be automatically detected and mitigated.
        In effect, if most major ISPs are compliant, the propagation of route leaks in the Internet will be severely limited.
      </t>
      <t>
        The above properties show that ASPA-based path verification offers significant benefits to early adopters.
        Limitations of the method with regard to some forms of malicious AS path manipulations are discussed in <xref target="security"/>.
      </t>
    </section>
  </back>
</rfc>


